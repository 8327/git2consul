{
  "name": "consul-node",
  "version": "0.0.2",
  "description": "Client library for consul",
  "repository": {
    "type": "git",
    "url": "git://github.com/gjohnson/consul-node.git"
  },
  "main": "index.js",
  "directories": {
    "example": "examples",
    "test": "test"
  },
  "scripts": {
    "test": "make test"
  },
  "keywords": [
    "consul"
  ],
  "author": {
    "name": "Garrett Johnson"
  },
  "license": "MIT",
  "dependencies": {
    "debug": "1.0.2",
    "defaults": "1.0.0",
    "is-type": "0.0.1",
    "request": "2.34.0",
    "to-camel-case": "0.2.1"
  },
  "devDependencies": {
    "mocha": "1.18.2",
    "should": "3.3.1"
  },
  "readme": "\n# consul-node\n\nA node.js client library for [consul](http://www.consul.io/)\n\nThis module attempts to be \"low level\" and follows consul's API pretty closely, meaning not a whole lot of sugar is provided for you. If you need something small, sugary and focused, use this module to build something higher level.\n\n## Warning\n\nThis not stable because is still being developed, feel free to help out!\n\n## Install\n\n```sh\n$ npm install consul-node\n```\n\n## Configure\n\nThe following options can be passed to the `Consul` constructor.\n\n  - `host` -- The consul agent's host (defaults to `localhost`).\n  - `port` -- The consul agent's port (defaults to `8500`).\n  - `secure` -- Use https when talking to the agent (defaults to `false`).\n  - `strict` -- Treat HTTP 404's as errors (defaults to `false`).\n\n```js\nvar Consul = require('consul-node');\n\nvar consul = new Consul({\n  host: 'localhost',\n  port: 8300,\n});\n```\n\n## General\n\nBasically all calls support passing an optional parameter before the callback. This parameter is useful when wanting to pass query string parameters to the calls.\n\nFor example, this can be used to filter the services returned by the health endpoint.\n\n```js\n// Get all nodes having the 'myservice' service\nconsul.health.service('myservice', function (err, nodes) {\n    if (err) return console.error(err.stack);\n    console.log('nodes -- %j', nodes);\n});\n\n// Get all healthy ('passing') nodes having the 'myservice' service\nconsul.health.service('myservice', {passing: 1 }, function (err, nodes) {\n    if (err) return console.error(err.stack);\n    console.log('nodes -- %j', nodes);\n});\n```\n\n## KV API\n\nImplements the [KV](http://www.consul.io/docs/agent/http.html#toc_2) endpoints.\n\n  - consul.kv.get(key, callback)\n  - consul.kv.put(key, data, callback)\n  - consul.kv.delete(key, callback)\n\nTODO: flags, cas, recurse, blocking queries.\n\n```js\nvar consul = new Consul();\n\nconsul.kv.put('hello', 'world', function (err, ok) {\n  if (err) throw err;\n  consul.kv.get('hello', function (err, items) {\n    if (err) throw err;\n    console.log(items);\n  });\n});\n```\n\n## Status API\n\nImplements the [status](http://www.consul.io/docs/agent/http.html#toc_29) endpoints.\n\n  - consul.status.leader(callback)\n  - consul.status.peers(callback)\n\n```js\nvar consul = new Consul();\n\nconsul.status.peers(function (err, peers) {\n  if (err) throw err;\n  console.log('peers -- %j', peers);\n});\n\nconsul.status.leader(function (err, leader) {\n  if (err) throw err;\n  console.log('leader -- %s', leader);\n});\n```\n\n## Agent API\n\nImplements the [agent](http://www.consul.io/docs/agent/http.html#toc_3) endpoints.\n\n  - consul.agent.checks(callback)\n  - consul.agent.services(callback)\n  - consul.agent.members(callback)\n\nImplemented but not yet covered by tests:\n\n - consul.agent.join(address, callback)\n - consul.agent.forceLeave(node, callback)\n - consul.agent.registerCheck(check, callback)\n - consul.agent.deregisterCheck(checkId, callback)\n - consul.agent.passCheck(checkId, callback)\n - consul.agent.warnCheck(checkId, callback)\n - consul.agent.failCheck(checkId, callback)\n - consul.agent.registerService(service, callback)\n - consul.agent.deregisterService(serviceId, callback)\n\n\nTODO: Implement tests for the remaining calls.\n\n```js\nvar consul = new Consul();\n\nconsul.agent.checks(function (err, checks) {\n  if (err) throw err;\n  console.log('checks -- %j', checks);\n});\n\nconsul.agent.services(function (err, services) {\n  if (err) throw err;\n  console.log('services -- %j', services);\n});\n\nconsul.agent.members(function (err, members) {\n  if (err) throw err;\n  console.log('members -- %j', members);\n});\n```\n\n### Catalog API\n\nImplements the [catalog](http://www.consul.io/docs/agent/http.html#toc_16) endpoints.\n\nCurrently implemented:\n\n - consul.catalog.service(serviceName, callback)\n\nTODO: Implement the remaining calls.\n\n### Health API\n\nImplements the [health](http://www.consul.io/docs/agent/http.html#toc_24) endpoints.\n\n - node(node, callback)\n - checks(serviceName, callback)\n - service(serviceName, opts, callback)\n - state(state, callback)\n\nThe opts parameter can be used for filtering. Set it to ``{passing: 1}`` to add a query parameter to the request,\nwhich causes the Consul HTTP API to only return service nodes with passing checks.\n\n## Running tests\n\nTo run the tests, you have to have the Consul agent running locally.\n\nStart the agent using:\n\n```\n// From the consul-node root folder\n$ consul agent -config-dir=./test/config/consul.d\n```\n\nThen execute the tests using ``npm test``.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/gjohnson/consul-node/issues"
  },
  "homepage": "https://github.com/gjohnson/consul-node",
  "_id": "consul-node@0.0.2",
  "_from": "consul-node@"
}
